#include <boost/beast/core.hpp>
#include <boost/beast/http.hpp>
#include <boost/beast/version.hpp>
#include <boost/asio/connect.hpp>
#include <boost/asio/ip/tcp.hpp>
#include <iostream>
#include <string>

namespace beast = boost::beast;
namespace http = beast::http;
namespace net = boost::asio;
using tcp = net::ip::tcp;

int main() {
    try {
        // Token JWT que quieres enviar
        std::string jwt_token = "TU_TOKEN_AQUI";

        // Host y puerto del servidor
        std::string host = "tu-api.com";
        std::string port = "80"; // Usa "443" si es HTTPS

        // Ruta protegida
        std::string target = "/protegido";
        int version = 11; // HTTP/1.1

        // Contexto y socket
        net::io_context ioc;
        tcp::resolver resolver(ioc);
        beast::tcp_stream stream(ioc);

        // Resolver y conectar
        auto const results = resolver.resolve(host, port);
        stream.connect(results);

        // Crear la petición GET con encabezado Authorization
        http::request<http::string_body> req{http::verb::get, target, version};
        req.set(http::field::host, host);
        req.set(http::field::user_agent, BOOST_BEAST_VERSION_STRING);
        req.set(http::field::authorization, "Bearer " + jwt_token);
        req.set(http::field::content_type, "application/json");

        // Enviar la petición
        http::write(stream, req);

        // Leer la respuesta
        beast::flat_buffer buffer;
        http::response<http::dynamic_body> res;
        http::read(stream, buffer, res);

        // Mostrar la respuesta
        std::cout << res << std::endl;

        // Cerrar la conexión
        beast::error_code ec;
        stream.socket().shutdown(tcp::socket::shutdown_both, ec);
        if (ec && ec != beast::errc::not_connected)
            throw beast::system_error{ec};
    }
    catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
