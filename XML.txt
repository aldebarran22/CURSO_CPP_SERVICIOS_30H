#include <libxml/parser.h>
#include <libxml/tree.h>
#include <iostream>
#include <vector>

struct Persona {
    std::string nombre;
    int edad;

    // MÃ©todo para convertir a XML
    xmlNodePtr to_xml(xmlDocPtr doc) const {
        xmlNodePtr personaNode = xmlNewNode(nullptr, BAD_CAST "persona");

        xmlNewChild(personaNode, nullptr, BAD_CAST "nombre", BAD_CAST nombre.c_str());

        std::string edadStr = std::to_string(edad);
        xmlNewChild(personaNode, nullptr, BAD_CAST "edad", BAD_CAST edadStr.c_str());

        return personaNode;
    }
};


struct Persona {
    std::string nombre;
    int edad;

    xmlNodePtr to_xml(xmlDocPtr doc) const {
        xmlNodePtr personaNode = xmlNewNode(nullptr, BAD_CAST "persona");
        xmlNewChild(personaNode, nullptr, BAD_CAST "nombre", BAD_CAST nombre.c_str());
        xmlNewChild(personaNode, nullptr, BAD_CAST "edad", BAD_CAST std::to_string(edad).c_str());
        return personaNode;
    }
};

int main() {
    xmlDocPtr doc = xmlNewDoc(BAD_CAST "1.0");
    xmlNodePtr root = xmlNewNode(nullptr, BAD_CAST "personas");
    xmlDocSetRootElement(doc, root);

    std::vector<Persona> lista = {
        {"Ana", 28},
        {"Luis", 35},
        {"Marta", 22}
    };

    for (const auto& p : lista) {
        xmlAddChild(root, p.to_xml(doc));
    }

    xmlSaveFormatFileEnc("personas.xml", doc, "UTF-8", 1);
    xmlFreeDoc(doc);
    xmlCleanupParser();

    std::cout << "Archivo XML generado: personas.xml\n";
    return 0;
}
